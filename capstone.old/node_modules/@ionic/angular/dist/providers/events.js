import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var Events = /** @class */ (function () {
    function Events() {
        this.c = new Map();
    }
    /**
     * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
     *
     * @param topic the topic to subscribe to
     * @param handler the event handler
     */
    Events.prototype.subscribe = function (topic) {
        var handlers = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            handlers[_i - 1] = arguments[_i];
        }
        var topics = this.c.get(topic);
        if (!topics) {
            this.c.set(topic, topics = []);
        }
        topics.push.apply(topics, handlers);
    };
    /**
     * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
     *
     * @param topic the topic to unsubscribe from
     * @param handler the event handler
     *
     * @return true if a handler was removed
     */
    Events.prototype.unsubscribe = function (topic, handler) {
        if (!handler) {
            return this.c.delete(topic);
        }
        var topics = this.c.get(topic);
        if (!topics) {
            return false;
        }
        // We need to find and remove a specific handler
        var index = topics.indexOf(handler);
        if (index < 0) {
            // Wasn't found, wasn't removed
            return false;
        }
        topics.splice(index, 1);
        if (topics.length === 0) {
            this.c.delete(topic);
        }
        return true;
    };
    /**
     * Publish an event to the given topic.
     *
     * @param topic the topic to publish to
     * @param eventData the data to send as the event
     */
    Events.prototype.publish = function (topic) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var topics = this.c.get(topic);
        if (!topics) {
            return null;
        }
        return topics.map(function (handler) {
            try {
                return handler.apply(void 0, args);
            }
            catch (e) {
                console.error(e);
                return null;
            }
        });
    };
    Events = tslib_1.__decorate([
        Injectable()
    ], Events);
    return Events;
}());
export { Events };
export function setupEvents() {
    var events = new Events();
    window.addEventListener('online', function (ev) { return events.publish('app:online', ev); });
    window.addEventListener('offline', function (ev) { return events.publish('app:offline', ev); });
    window.addEventListener('orientationchange', function (ev) { return events.publish('app:rotated', ev); });
    return events;
}
export function setupProvideEvents() {
    return function () {
        return setupEvents();
    };
}
