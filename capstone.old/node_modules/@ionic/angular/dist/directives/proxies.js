/* tslint:disable */
/* auto-generated angular directive proxies */
import * as tslib_1 from "tslib";
import { fromEvent } from 'rxjs';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, ViewEncapsulation } from '@angular/core';
export function proxyInputs(instance, el, props) {
    props.forEach(function (propName) {
        Object.defineProperty(instance, propName, {
            get: function () { return el[propName]; }, set: function (val) { return el[propName] = val; }
        });
    });
}
export function proxyOutputs(instance, el, events) {
    events.forEach(function (eventName) { return instance[eventName] = fromEvent(el, eventName); });
}
export function proxyMethods(instance, el, methods) {
    methods.forEach(function (methodName) {
        Object.defineProperty(instance, methodName, {
            get: function () {
                return function () {
                    var args = arguments;
                    return el.componentOnReady().then(function (el) { return el[methodName].apply(el, args); });
                };
            }
        });
    });
}
var IonApp = /** @class */ (function () {
    function IonApp() {
    }
    IonApp = tslib_1.__decorate([
        Component({ selector: 'ion-app', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonApp);
    return IonApp;
}());
export { IonApp };
var IonAvatar = /** @class */ (function () {
    function IonAvatar() {
    }
    IonAvatar = tslib_1.__decorate([
        Component({ selector: 'ion-avatar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonAvatar);
    return IonAvatar;
}());
export { IonAvatar };
var IonBackButton = /** @class */ (function () {
    function IonBackButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'defaultHref', 'icon', 'text']);
    }
    IonBackButton = tslib_1.__decorate([
        Component({ selector: 'ion-back-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'defaultHref', 'icon', 'text'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonBackButton);
    return IonBackButton;
}());
export { IonBackButton };
var IonBackdrop = /** @class */ (function () {
    function IonBackdrop(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['visible', 'tappable', 'stopPropagation']);
        proxyOutputs(this, el, ['ionBackdropTap']);
    }
    IonBackdrop = tslib_1.__decorate([
        Component({ selector: 'ion-backdrop', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['visible', 'tappable', 'stopPropagation'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonBackdrop);
    return IonBackdrop;
}());
export { IonBackdrop };
var IonBadge = /** @class */ (function () {
    function IonBadge(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    IonBadge = tslib_1.__decorate([
        Component({ selector: 'ion-badge', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonBadge);
    return IonBadge;
}());
export { IonBadge };
var IonButton = /** @class */ (function () {
    function IonButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'buttonType', 'disabled', 'expand', 'fill', 'routerDirection', 'href', 'shape', 'size', 'strong', 'type']);
        proxyOutputs(this, el, ['ionFocus', 'ionBlur']);
    }
    IonButton = tslib_1.__decorate([
        Component({ selector: 'ion-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'buttonType', 'disabled', 'expand', 'fill', 'routerDirection', 'href', 'shape', 'size', 'strong', 'type'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonButton);
    return IonButton;
}());
export { IonButton };
var IonButtons = /** @class */ (function () {
    function IonButtons() {
    }
    IonButtons = tslib_1.__decorate([
        Component({ selector: 'ion-buttons', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonButtons);
    return IonButtons;
}());
export { IonButtons };
var IonCard = /** @class */ (function () {
    function IonCard(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    IonCard = tslib_1.__decorate([
        Component({ selector: 'ion-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonCard);
    return IonCard;
}());
export { IonCard };
var IonCardContent = /** @class */ (function () {
    function IonCardContent(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode']);
    }
    IonCardContent = tslib_1.__decorate([
        Component({ selector: 'ion-card-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonCardContent);
    return IonCardContent;
}());
export { IonCardContent };
var IonCardHeader = /** @class */ (function () {
    function IonCardHeader(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'translucent']);
    }
    IonCardHeader = tslib_1.__decorate([
        Component({ selector: 'ion-card-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'translucent'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonCardHeader);
    return IonCardHeader;
}());
export { IonCardHeader };
var IonCardSubtitle = /** @class */ (function () {
    function IonCardSubtitle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    IonCardSubtitle = tslib_1.__decorate([
        Component({ selector: 'ion-card-subtitle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonCardSubtitle);
    return IonCardSubtitle;
}());
export { IonCardSubtitle };
var IonCardTitle = /** @class */ (function () {
    function IonCardTitle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    IonCardTitle = tslib_1.__decorate([
        Component({ selector: 'ion-card-title', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonCardTitle);
    return IonCardTitle;
}());
export { IonCardTitle };
var IonCheckbox = /** @class */ (function () {
    function IonCheckbox(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'name', 'checked', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    IonCheckbox = tslib_1.__decorate([
        Component({ selector: 'ion-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'name', 'checked', 'disabled', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonCheckbox);
    return IonCheckbox;
}());
export { IonCheckbox };
var IonChip = /** @class */ (function () {
    function IonChip(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'outline']);
    }
    IonChip = tslib_1.__decorate([
        Component({ selector: 'ion-chip', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'outline'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonChip);
    return IonChip;
}());
export { IonChip };
var IonCol = /** @class */ (function () {
    function IonCol(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['offset', 'offsetXs', 'offsetSm', 'offsetMd', 'offsetLg', 'offsetXl', 'pull', 'pullXs', 'pullSm', 'pullMd', 'pullLg', 'pullXl', 'push', 'pushXs', 'pushSm', 'pushMd', 'pushLg', 'pushXl', 'size', 'sizeXs', 'sizeSm', 'sizeMd', 'sizeLg', 'sizeXl']);
    }
    IonCol = tslib_1.__decorate([
        Component({ selector: 'ion-col', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['offset', 'offsetXs', 'offsetSm', 'offsetMd', 'offsetLg', 'offsetXl', 'pull', 'pullXs', 'pullSm', 'pullMd', 'pullLg', 'pullXl', 'push', 'pushXs', 'pushSm', 'pushMd', 'pushLg', 'pushXl', 'size', 'sizeXs', 'sizeSm', 'sizeMd', 'sizeLg', 'sizeXl'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonCol);
    return IonCol;
}());
export { IonCol };
var IonContent = /** @class */ (function () {
    function IonContent(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['getScrollElement', 'scrollToTop', 'scrollToBottom', 'scrollByPoint', 'scrollToPoint']);
        proxyInputs(this, el, ['color', 'fullscreen', 'forceOverscroll', 'scrollX', 'scrollY', 'scrollEvents']);
        proxyOutputs(this, el, ['ionScrollStart', 'ionScroll', 'ionScrollEnd']);
    }
    IonContent = tslib_1.__decorate([
        Component({ selector: 'ion-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'fullscreen', 'forceOverscroll', 'scrollX', 'scrollY', 'scrollEvents'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonContent);
    return IonContent;
}());
export { IonContent };
var IonDatetime = /** @class */ (function () {
    function IonDatetime(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['open']);
        proxyInputs(this, el, ['mode', 'name', 'disabled', 'min', 'max', 'displayFormat', 'pickerFormat', 'cancelText', 'doneText', 'yearValues', 'monthValues', 'dayValues', 'hourValues', 'minuteValues', 'monthNames', 'monthShortNames', 'dayNames', 'dayShortNames', 'pickerOptions', 'placeholder', 'value']);
        proxyOutputs(this, el, ['ionCancel', 'ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    IonDatetime = tslib_1.__decorate([
        Component({ selector: 'ion-datetime', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'name', 'disabled', 'min', 'max', 'displayFormat', 'pickerFormat', 'cancelText', 'doneText', 'yearValues', 'monthValues', 'dayValues', 'hourValues', 'minuteValues', 'monthNames', 'monthShortNames', 'dayNames', 'dayShortNames', 'pickerOptions', 'placeholder', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonDatetime);
    return IonDatetime;
}());
export { IonDatetime };
var IonFab = /** @class */ (function () {
    function IonFab(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['close']);
        proxyInputs(this, el, ['horizontal', 'vertical', 'edge', 'activated']);
    }
    IonFab = tslib_1.__decorate([
        Component({ selector: 'ion-fab', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['horizontal', 'vertical', 'edge', 'activated'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonFab);
    return IonFab;
}());
export { IonFab };
var IonFabButton = /** @class */ (function () {
    function IonFabButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'activated', 'disabled', 'href', 'routerDirection', 'show', 'translucent', 'type', 'size']);
        proxyOutputs(this, el, ['ionFocus', 'ionBlur']);
    }
    IonFabButton = tslib_1.__decorate([
        Component({ selector: 'ion-fab-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'activated', 'disabled', 'href', 'routerDirection', 'show', 'translucent', 'type', 'size'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonFabButton);
    return IonFabButton;
}());
export { IonFabButton };
var IonFabList = /** @class */ (function () {
    function IonFabList(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['activated', 'side']);
    }
    IonFabList = tslib_1.__decorate([
        Component({ selector: 'ion-fab-list', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['activated', 'side'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonFabList);
    return IonFabList;
}());
export { IonFabList };
var IonFooter = /** @class */ (function () {
    function IonFooter(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'translucent']);
    }
    IonFooter = tslib_1.__decorate([
        Component({ selector: 'ion-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'translucent'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonFooter);
    return IonFooter;
}());
export { IonFooter };
var IonGrid = /** @class */ (function () {
    function IonGrid(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['fixed']);
    }
    IonGrid = tslib_1.__decorate([
        Component({ selector: 'ion-grid', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['fixed'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonGrid);
    return IonGrid;
}());
export { IonGrid };
var IonHeader = /** @class */ (function () {
    function IonHeader(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'translucent']);
    }
    IonHeader = tslib_1.__decorate([
        Component({ selector: 'ion-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'translucent'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonHeader);
    return IonHeader;
}());
export { IonHeader };
var IonIcon = /** @class */ (function () {
    function IonIcon(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['ariaLabel', 'color', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'size', 'src']);
    }
    IonIcon = tslib_1.__decorate([
        Component({ selector: 'ion-icon', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['ariaLabel', 'color', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'size', 'src'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonIcon);
    return IonIcon;
}());
export { IonIcon };
var IonImg = /** @class */ (function () {
    function IonImg(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['alt', 'src']);
        proxyOutputs(this, el, ['ionImgDidLoad']);
    }
    IonImg = tslib_1.__decorate([
        Component({ selector: 'ion-img', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['alt', 'src'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonImg);
    return IonImg;
}());
export { IonImg };
var IonInfiniteScroll = /** @class */ (function () {
    function IonInfiniteScroll(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete']);
        proxyInputs(this, el, ['threshold', 'disabled', 'position']);
        proxyOutputs(this, el, ['ionInfinite']);
    }
    IonInfiniteScroll = tslib_1.__decorate([
        Component({ selector: 'ion-infinite-scroll', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['threshold', 'disabled', 'position'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonInfiniteScroll);
    return IonInfiniteScroll;
}());
export { IonInfiniteScroll };
var IonInfiniteScrollContent = /** @class */ (function () {
    function IonInfiniteScrollContent(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['loadingSpinner', 'loadingText']);
    }
    IonInfiniteScrollContent = tslib_1.__decorate([
        Component({ selector: 'ion-infinite-scroll-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['loadingSpinner', 'loadingText'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonInfiniteScrollContent);
    return IonInfiniteScrollContent;
}());
export { IonInfiniteScrollContent };
var IonInput = /** @class */ (function () {
    function IonInput(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['color', 'mode', 'accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'debounce', 'disabled', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'spellcheck', 'step', 'size', 'type', 'value']);
        proxyOutputs(this, el, ['ionInput', 'ionChange', 'ionBlur', 'ionFocus', 'ionInputDidLoad', 'ionInputDidUnload', 'ionStyle']);
    }
    IonInput = tslib_1.__decorate([
        Component({ selector: 'ion-input', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'debounce', 'disabled', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'spellcheck', 'step', 'size', 'type', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonInput);
    return IonInput;
}());
export { IonInput };
var IonItem = /** @class */ (function () {
    function IonItem(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'button', 'detail', 'detailIcon', 'disabled', 'href', 'lines', 'routerDirection', 'type']);
    }
    IonItem = tslib_1.__decorate([
        Component({ selector: 'ion-item', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'button', 'detail', 'detailIcon', 'disabled', 'href', 'lines', 'routerDirection', 'type'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonItem);
    return IonItem;
}());
export { IonItem };
var IonItemDivider = /** @class */ (function () {
    function IonItemDivider(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'sticky']);
    }
    IonItemDivider = tslib_1.__decorate([
        Component({ selector: 'ion-item-divider', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'sticky'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonItemDivider);
    return IonItemDivider;
}());
export { IonItemDivider };
var IonItemGroup = /** @class */ (function () {
    function IonItemGroup() {
    }
    IonItemGroup = tslib_1.__decorate([
        Component({ selector: 'ion-item-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonItemGroup);
    return IonItemGroup;
}());
export { IonItemGroup };
var IonItemOption = /** @class */ (function () {
    function IonItemOption(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'disabled', 'expandable', 'href']);
    }
    IonItemOption = tslib_1.__decorate([
        Component({ selector: 'ion-item-option', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'disabled', 'expandable', 'href'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonItemOption);
    return IonItemOption;
}());
export { IonItemOption };
var IonItemOptions = /** @class */ (function () {
    function IonItemOptions(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['fireSwipeEvent']);
        proxyInputs(this, el, ['side']);
        proxyOutputs(this, el, ['ionSwipe']);
    }
    IonItemOptions = tslib_1.__decorate([
        Component({ selector: 'ion-item-options', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['side'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonItemOptions);
    return IonItemOptions;
}());
export { IonItemOptions };
var IonItemSliding = /** @class */ (function () {
    function IonItemSliding(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['getOpenAmount', 'getSlidingRatio', 'close', 'closeOpened']);
        proxyInputs(this, el, ['disabled']);
        proxyOutputs(this, el, ['ionDrag']);
    }
    IonItemSliding = tslib_1.__decorate([
        Component({ selector: 'ion-item-sliding', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonItemSliding);
    return IonItemSliding;
}());
export { IonItemSliding };
var IonLabel = /** @class */ (function () {
    function IonLabel(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'position']);
        proxyOutputs(this, el, ['ionStyle']);
    }
    IonLabel = tslib_1.__decorate([
        Component({ selector: 'ion-label', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'position'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonLabel);
    return IonLabel;
}());
export { IonLabel };
var IonList = /** @class */ (function () {
    function IonList(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['closeSlidingItems']);
        proxyInputs(this, el, ['mode', 'lines', 'inset']);
    }
    IonList = tslib_1.__decorate([
        Component({ selector: 'ion-list', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'lines', 'inset'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonList);
    return IonList;
}());
export { IonList };
var IonListHeader = /** @class */ (function () {
    function IonListHeader(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color']);
    }
    IonListHeader = tslib_1.__decorate([
        Component({ selector: 'ion-list-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonListHeader);
    return IonListHeader;
}());
export { IonListHeader };
var IonMenu = /** @class */ (function () {
    function IonMenu(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['isOpen', 'isActive', 'open', 'close', 'toggle', 'setOpen']);
        proxyInputs(this, el, ['contentId', 'menuId', 'type', 'disabled', 'side', 'swipeGesture', 'maxEdgeStart']);
        proxyOutputs(this, el, ['ionWillOpen', 'ionWillClose', 'ionDidOpen', 'ionDidClose', 'ionMenuChange']);
    }
    IonMenu = tslib_1.__decorate([
        Component({ selector: 'ion-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['contentId', 'menuId', 'type', 'disabled', 'side', 'swipeGesture', 'maxEdgeStart'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonMenu);
    return IonMenu;
}());
export { IonMenu };
var IonMenuButton = /** @class */ (function () {
    function IonMenuButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'menu', 'autoHide']);
    }
    IonMenuButton = tslib_1.__decorate([
        Component({ selector: 'ion-menu-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'menu', 'autoHide'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonMenuButton);
    return IonMenuButton;
}());
export { IonMenuButton };
var IonMenuToggle = /** @class */ (function () {
    function IonMenuToggle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['menu', 'autoHide']);
    }
    IonMenuToggle = tslib_1.__decorate([
        Component({ selector: 'ion-menu-toggle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['menu', 'autoHide'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonMenuToggle);
    return IonMenuToggle;
}());
export { IonMenuToggle };
var IonNav = /** @class */ (function () {
    function IonNav(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['push', 'insert', 'insertPages', 'pop', 'popTo', 'popToRoot', 'removeIndex', 'setRoot', 'setPages', 'setRouteId', 'getRouteId', 'getActive', 'getByIndex', 'canGoBack', 'getPrevious']);
        proxyInputs(this, el, ['delegate', 'swipeGesture', 'animated', 'animation', 'rootParams', 'root']);
        proxyOutputs(this, el, ['ionNavWillLoad', 'ionNavWillChange', 'ionNavDidChange']);
    }
    IonNav = tslib_1.__decorate([
        Component({ selector: 'ion-nav', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['delegate', 'swipeGesture', 'animated', 'animation', 'rootParams', 'root'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonNav);
    return IonNav;
}());
export { IonNav };
var IonNavPop = /** @class */ (function () {
    function IonNavPop() {
    }
    IonNavPop = tslib_1.__decorate([
        Component({ selector: 'ion-nav-pop', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonNavPop);
    return IonNavPop;
}());
export { IonNavPop };
var IonNavPush = /** @class */ (function () {
    function IonNavPush(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['component', 'componentProps']);
    }
    IonNavPush = tslib_1.__decorate([
        Component({ selector: 'ion-nav-push', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['component', 'componentProps'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonNavPush);
    return IonNavPush;
}());
export { IonNavPush };
var IonNavSetRoot = /** @class */ (function () {
    function IonNavSetRoot(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['component', 'componentProps']);
    }
    IonNavSetRoot = tslib_1.__decorate([
        Component({ selector: 'ion-nav-set-root', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['component', 'componentProps'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonNavSetRoot);
    return IonNavSetRoot;
}());
export { IonNavSetRoot };
var IonNote = /** @class */ (function () {
    function IonNote(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    IonNote = tslib_1.__decorate([
        Component({ selector: 'ion-note', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonNote);
    return IonNote;
}());
export { IonNote };
var IonProgressBar = /** @class */ (function () {
    function IonProgressBar(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'type', 'reversed', 'value', 'buffer', 'color']);
    }
    IonProgressBar = tslib_1.__decorate([
        Component({ selector: 'ion-progress-bar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'type', 'reversed', 'value', 'buffer', 'color'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonProgressBar);
    return IonProgressBar;
}());
export { IonProgressBar };
var IonRadio = /** @class */ (function () {
    function IonRadio(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'name', 'disabled', 'checked', 'value']);
        proxyOutputs(this, el, ['ionRadioDidLoad', 'ionRadioDidUnload', 'ionStyle', 'ionSelect', 'ionFocus', 'ionBlur']);
    }
    IonRadio = tslib_1.__decorate([
        Component({ selector: 'ion-radio', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'name', 'disabled', 'checked', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonRadio);
    return IonRadio;
}());
export { IonRadio };
var IonRadioGroup = /** @class */ (function () {
    function IonRadioGroup(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['allowEmptySelection', 'name', 'value']);
        proxyOutputs(this, el, ['ionChange']);
    }
    IonRadioGroup = tslib_1.__decorate([
        Component({ selector: 'ion-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['allowEmptySelection', 'name', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonRadioGroup);
    return IonRadioGroup;
}());
export { IonRadioGroup };
var IonRange = /** @class */ (function () {
    function IonRange(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'debounce', 'name', 'dualKnobs', 'min', 'max', 'pin', 'snaps', 'step', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionStyle', 'ionFocus', 'ionBlur']);
    }
    IonRange = tslib_1.__decorate([
        Component({ selector: 'ion-range', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'debounce', 'name', 'dualKnobs', 'min', 'max', 'pin', 'snaps', 'step', 'disabled', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonRange);
    return IonRange;
}());
export { IonRange };
var IonRefresher = /** @class */ (function () {
    function IonRefresher(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete', 'cancel', 'getProgress']);
        proxyInputs(this, el, ['pullMin', 'pullMax', 'closeDuration', 'snapbackDuration', 'disabled']);
        proxyOutputs(this, el, ['ionRefresh', 'ionPull', 'ionStart']);
    }
    IonRefresher = tslib_1.__decorate([
        Component({ selector: 'ion-refresher', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['pullMin', 'pullMax', 'closeDuration', 'snapbackDuration', 'disabled'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonRefresher);
    return IonRefresher;
}());
export { IonRefresher };
var IonRefresherContent = /** @class */ (function () {
    function IonRefresherContent(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText']);
    }
    IonRefresherContent = tslib_1.__decorate([
        Component({ selector: 'ion-refresher-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonRefresherContent);
    return IonRefresherContent;
}());
export { IonRefresherContent };
var IonReorder = /** @class */ (function () {
    function IonReorder() {
    }
    IonReorder = tslib_1.__decorate([
        Component({ selector: 'ion-reorder', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonReorder);
    return IonReorder;
}());
export { IonReorder };
var IonReorderGroup = /** @class */ (function () {
    function IonReorderGroup(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete']);
        proxyInputs(this, el, ['disabled']);
        proxyOutputs(this, el, ['ionItemReorder']);
    }
    IonReorderGroup = tslib_1.__decorate([
        Component({ selector: 'ion-reorder-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonReorderGroup);
    return IonReorderGroup;
}());
export { IonReorderGroup };
var IonRippleEffect = /** @class */ (function () {
    function IonRippleEffect(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['addRipple']);
        proxyInputs(this, el, ['type']);
    }
    IonRippleEffect = tslib_1.__decorate([
        Component({ selector: 'ion-ripple-effect', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['type'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonRippleEffect);
    return IonRippleEffect;
}());
export { IonRippleEffect };
var IonRow = /** @class */ (function () {
    function IonRow() {
    }
    IonRow = tslib_1.__decorate([
        Component({ selector: 'ion-row', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonRow);
    return IonRow;
}());
export { IonRow };
var IonSearchbar = /** @class */ (function () {
    function IonSearchbar(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['color', 'mode', 'animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'debounce', 'placeholder', 'searchIcon', 'showCancelButton', 'spellcheck', 'type', 'value']);
        proxyOutputs(this, el, ['ionInput', 'ionChange', 'ionCancel', 'ionClear', 'ionBlur', 'ionFocus']);
    }
    IonSearchbar = tslib_1.__decorate([
        Component({ selector: 'ion-searchbar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'debounce', 'placeholder', 'searchIcon', 'showCancelButton', 'spellcheck', 'type', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSearchbar);
    return IonSearchbar;
}());
export { IonSearchbar };
var IonSegment = /** @class */ (function () {
    function IonSegment(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'disabled', 'scrollable', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionStyle']);
    }
    IonSegment = tslib_1.__decorate([
        Component({ selector: 'ion-segment', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'disabled', 'scrollable', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSegment);
    return IonSegment;
}());
export { IonSegment };
var IonSegmentButton = /** @class */ (function () {
    function IonSegmentButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'checked', 'disabled', 'layout', 'value']);
        proxyOutputs(this, el, ['ionSelect']);
    }
    IonSegmentButton = tslib_1.__decorate([
        Component({ selector: 'ion-segment-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'checked', 'disabled', 'layout', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSegmentButton);
    return IonSegmentButton;
}());
export { IonSegmentButton };
var IonSelect = /** @class */ (function () {
    function IonSelect(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['open']);
        proxyInputs(this, el, ['mode', 'disabled', 'cancelText', 'okText', 'placeholder', 'name', 'selectedText', 'multiple', 'interface', 'interfaceOptions', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionCancel', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    IonSelect = tslib_1.__decorate([
        Component({ selector: 'ion-select', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'disabled', 'cancelText', 'okText', 'placeholder', 'name', 'selectedText', 'multiple', 'interface', 'interfaceOptions', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSelect);
    return IonSelect;
}());
export { IonSelect };
var IonSelectOption = /** @class */ (function () {
    function IonSelectOption(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['disabled', 'selected', 'value']);
        proxyOutputs(this, el, ['ionSelectOptionDidLoad', 'ionSelectOptionDidUnload']);
    }
    IonSelectOption = tslib_1.__decorate([
        Component({ selector: 'ion-select-option', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled', 'selected', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSelectOption);
    return IonSelectOption;
}());
export { IonSelectOption };
var IonSelectPopover = /** @class */ (function () {
    function IonSelectPopover(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['header', 'subHeader', 'message', 'options']);
    }
    IonSelectPopover = tslib_1.__decorate([
        Component({ selector: 'ion-select-popover', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['header', 'subHeader', 'message', 'options'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSelectPopover);
    return IonSelectPopover;
}());
export { IonSelectPopover };
var IonSkeletonText = /** @class */ (function () {
    function IonSkeletonText(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['width']);
    }
    IonSkeletonText = tslib_1.__decorate([
        Component({ selector: 'ion-skeleton-text', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['width'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSkeletonText);
    return IonSkeletonText;
}());
export { IonSkeletonText };
var IonSlide = /** @class */ (function () {
    function IonSlide(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyOutputs(this, el, ['ionSlideChanged']);
    }
    IonSlide = tslib_1.__decorate([
        Component({ selector: 'ion-slide', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSlide);
    return IonSlide;
}());
export { IonSlide };
var IonSlides = /** @class */ (function () {
    function IonSlides(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['update', 'slideTo', 'slideNext', 'slidePrev', 'getActiveIndex', 'getPreviousIndex', 'length', 'isEnd', 'isBeginning', 'startAutoplay', 'stopAutoplay', 'lockSwipeToNext', 'lockSwipeToPrev', 'lockSwipes']);
        proxyInputs(this, el, ['mode', 'options', 'pager', 'scrollbar']);
        proxyOutputs(this, el, ['ionSlidesDidLoad', 'ionSlideTap', 'ionSlideDoubleTap', 'ionSlideWillChange', 'ionSlideDidChange', 'ionSlideNextStart', 'ionSlidePrevStart', 'ionSlideNextEnd', 'ionSlidePrevEnd', 'ionSlideTransitionStart', 'ionSlideTransitionEnd', 'ionSlideDrag', 'ionSlideReachStart', 'ionSlideReachEnd', 'ionSlideTouchStart', 'ionSlideTouchEnd']);
    }
    IonSlides = tslib_1.__decorate([
        Component({ selector: 'ion-slides', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'options', 'pager', 'scrollbar'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSlides);
    return IonSlides;
}());
export { IonSlides };
var IonSpinner = /** @class */ (function () {
    function IonSpinner(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'duration', 'name', 'paused']);
    }
    IonSpinner = tslib_1.__decorate([
        Component({ selector: 'ion-spinner', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'duration', 'name', 'paused'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSpinner);
    return IonSpinner;
}());
export { IonSpinner };
var IonSplitPane = /** @class */ (function () {
    function IonSplitPane(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['contentId', 'disabled', 'when']);
        proxyOutputs(this, el, ['ionChange', 'ionSplitPaneVisible']);
    }
    IonSplitPane = tslib_1.__decorate([
        Component({ selector: 'ion-split-pane', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['contentId', 'disabled', 'when'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonSplitPane);
    return IonSplitPane;
}());
export { IonSplitPane };
var IonTabBar = /** @class */ (function () {
    function IonTabBar(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'selectedTab', 'translucent']);
        proxyOutputs(this, el, ['ionTabBarChanged']);
    }
    IonTabBar = tslib_1.__decorate([
        Component({ selector: 'ion-tab-bar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'selectedTab', 'translucent'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonTabBar);
    return IonTabBar;
}());
export { IonTabBar };
var IonTabButton = /** @class */ (function () {
    function IonTabButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'layout', 'href', 'tab', 'disabled']);
        proxyOutputs(this, el, ['ionTabButtonClick']);
    }
    IonTabButton = tslib_1.__decorate([
        Component({ selector: 'ion-tab-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'layout', 'href', 'tab', 'disabled'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonTabButton);
    return IonTabButton;
}());
export { IonTabButton };
var IonText = /** @class */ (function () {
    function IonText(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    IonText = tslib_1.__decorate([
        Component({ selector: 'ion-text', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonText);
    return IonText;
}());
export { IonText };
var IonTextarea = /** @class */ (function () {
    function IonTextarea(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['mode', 'color', 'autocapitalize', 'autofocus', 'clearOnEdit', 'debounce', 'disabled', 'maxlength', 'minlength', 'name', 'placeholder', 'readonly', 'required', 'spellcheck', 'cols', 'rows', 'wrap', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionInput', 'ionStyle', 'ionBlur', 'ionFocus']);
    }
    IonTextarea = tslib_1.__decorate([
        Component({ selector: 'ion-textarea', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'autocapitalize', 'autofocus', 'clearOnEdit', 'debounce', 'disabled', 'maxlength', 'minlength', 'name', 'placeholder', 'readonly', 'required', 'spellcheck', 'cols', 'rows', 'wrap', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonTextarea);
    return IonTextarea;
}());
export { IonTextarea };
var IonThumbnail = /** @class */ (function () {
    function IonThumbnail() {
    }
    IonThumbnail = tslib_1.__decorate([
        Component({ selector: 'ion-thumbnail', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], IonThumbnail);
    return IonThumbnail;
}());
export { IonThumbnail };
var IonTitle = /** @class */ (function () {
    function IonTitle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color']);
    }
    IonTitle = tslib_1.__decorate([
        Component({ selector: 'ion-title', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonTitle);
    return IonTitle;
}());
export { IonTitle };
var IonToggle = /** @class */ (function () {
    function IonToggle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'name', 'checked', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    IonToggle = tslib_1.__decorate([
        Component({ selector: 'ion-toggle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'name', 'checked', 'disabled', 'value'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonToggle);
    return IonToggle;
}());
export { IonToggle };
var IonToolbar = /** @class */ (function () {
    function IonToolbar(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    IonToolbar = tslib_1.__decorate([
        Component({ selector: 'ion-toolbar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], IonToolbar);
    return IonToolbar;
}());
export { IonToolbar };
