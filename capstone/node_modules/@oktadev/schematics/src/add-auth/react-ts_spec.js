"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = __importStar(require("path"));
// const { spawnSync } = require('child_process');
const react_ts_pkg_json_1 = __importDefault(require("./react-ts-pkg.json"));
const collectionPath = path.join(__dirname, '../collection.json');
const defaultOptions = {
    issuer: 'https://dev-737523.okta.com/oauth2/default',
    clientId: '0oaifymbuodpH8nAi0h7'
};
describe('OktaDev Schematics: React + TypeScript', () => {
    it('requires required issuer option', () => {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        expect(() => runner.runSchematic('add-auth', {}, schematics_1.Tree.empty())).toThrow();
    });
    it('works', () => {
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree);
        // Add package.json
        tree.create('/package.json', JSON.stringify(react_ts_pkg_json_1.default));
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        runner.runSchematic('add-auth', Object.assign({}, defaultOptions), tree);
        expect(tree.files.length).toEqual(4);
        expect(tree.files.sort()).toEqual(['/package.json', '/src/App.tsx', '/src/Home.tsx', '/src/okta.d.ts']);
        const componentContent = tree.readContent('/src/App.tsx');
        expect(componentContent).toMatch(/class App extends React\.Component/);
        expect(componentContent).toContain(`issuer: '${defaultOptions.issuer}'`);
        expect(componentContent).toContain(`client_id: '${defaultOptions.clientId}'`);
    });
    it('fail with no package.json', () => {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        expect(() => runner.runSchematic('add-auth', Object.assign({}, defaultOptions), schematics_1.Tree.empty())).toThrow();
    });
    it('fail when no frameworks', () => {
        const pkgNoFrameworks = Object.assign({}, react_ts_pkg_json_1.default);
        delete pkgNoFrameworks.dependencies;
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree);
        tree.create('/package.json', JSON.stringify(pkgNoFrameworks));
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        expect(() => runner.runSchematic('add-auth', Object.assign({}, defaultOptions), schematics_1.Tree.empty())).toThrow();
    });
});
//# sourceMappingURL=react-ts_spec.js.map