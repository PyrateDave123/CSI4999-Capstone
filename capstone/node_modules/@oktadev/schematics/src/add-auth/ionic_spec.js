"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = __importStar(require("path"));
const ionic_pkg_json_1 = __importDefault(require("./ionic-pkg.json"));
const collectionPath = path.join(__dirname, '../collection.json');
const defaultOptions = {
    issuer: 'https://dev-737523.okta.com/oauth2/default',
    clientId: '0oaifymbuodpH8nAi0h7'
};
const defaultAppModule = `import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouteReuseStrategy } from '@angular/router';

import { IonicModule, IonicRouteStrategy } from '@ionic/angular';
import { SplashScreen } from '@ionic-native/splash-screen/ngx';
import { StatusBar } from '@ionic-native/status-bar/ngx';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  entryComponents: [],
  imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule],
  providers: [
    StatusBar,
    SplashScreen,
    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}`;
const existingPlugins = {
    plugins: {
        "cordova-plugin-camera": {
            "CAMERA_USAGE_DESCRIPTION": "Need camera access to take pictures",
            "PHOTOLIBRARY_USAGE_DESCRIPTION": "Need photo library access to get pictures from there"
        }
    }
};
describe('OktaDev Schematics: Ionic/Angular', () => {
    it('requires required issuer option', () => {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        expect(() => runner.runSchematic('add-auth', {}, schematics_1.Tree.empty())).toThrow();
    });
    it('works with cordova', () => {
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree);
        const pkg = Object.assign({}, ionic_pkg_json_1.default);
        pkg.cordova = Object.assign({}, existingPlugins);
        // Add package.json
        tree.create('/package.json', JSON.stringify(pkg));
        // Add app.module.ts
        tree.create('/src/app/app.module.ts', defaultAppModule);
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        runner.runSchematic('add-auth', Object.assign({}, defaultOptions), tree);
        expect(tree.files.length).toEqual(27);
        expect(tree.files.sort()).toEqual(['/package.json',
            '/src/app/app-routing.module.ts',
            '/src/app/app.component.spec.ts',
            '/src/app/app.component.ts',
            '/src/app/app.module.ts',
            '/src/app/auth/auth-guard.service.ts',
            '/src/app/auth/auth-http.service.ts',
            '/src/app/auth/auth.module.ts',
            '/src/app/auth/auth.service.ts',
            '/src/app/auth/browser.service.ts',
            '/src/app/auth/cordova-requestor.service.ts',
            '/src/app/auth/implicit/auth-callback/auth-callback.module.ts',
            '/src/app/auth/implicit/auth-callback/auth-callback.page.ts',
            '/src/app/auth/implicit/end-session/end-session.module.ts',
            '/src/app/auth/implicit/end-session/end-session.page.ts',
            '/src/app/auth/requestor.service.ts',
            '/src/app/auth/secure-storage.service.ts',
            '/src/app/auth/storage.service.ts',
            '/src/app/auth/user-info.model.ts',
            '/src/app/login/login.module.ts',
            '/src/app/login/login.page.html',
            '/src/app/login/login.page.scss',
            '/src/app/login/login.page.spec.ts',
            '/src/app/login/login.page.ts',
            '/src/app/tab1/tab1.page.html',
            '/src/app/tab1/tab1.page.spec.ts',
            '/src/app/tab1/tab1.page.ts']);
        const appModule = tree.readContent('/src/app/app.module.ts');
        expect(appModule).toMatch(/AuthModule/);
        expect(appModule).toMatch(/HttpClientModule/);
        const authService = tree.readContent('/src/app/auth/auth.service.ts');
        expect(authService).toContain(`clientId = '${defaultOptions.clientId}'`);
        expect(authService).toContain(`issuer = '${defaultOptions.issuer}'`);
        const pkgJson = tree.readContent('/package.json');
        expect(pkgJson).toContain('"cordova":');
        expect(pkgJson).toContain('"PHOTOLIBRARY_USAGE_DESCRIPTION"');
    });
    it('works with capacitor', () => {
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree);
        tree.create('/package.json', JSON.stringify(ionic_pkg_json_1.default));
        tree.create('/src/app/app.module.ts', defaultAppModule);
        const capacitorOptions = Object.assign({}, defaultOptions);
        capacitorOptions.platform = 'capacitor';
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        runner.runSchematic('add-auth', capacitorOptions, tree);
        expect(tree.files.length).toEqual(27);
        const appModule = tree.readContent('/src/app/app.module.ts');
        expect(appModule).toMatch(/AuthModule/);
        expect(appModule).toMatch(/HttpClientModule/);
        const authService = tree.readContent('/src/app/auth/auth.service.ts');
        expect(authService).toContain(`clientId = '${defaultOptions.clientId}'`);
        expect(authService).toContain(`issuer = '${defaultOptions.issuer}'`);
        const pkgJson = tree.readContent('/package.json');
        expect(pkgJson).not.toContain('"cordova":');
    });
});
//# sourceMappingURL=ionic_spec.js.map