"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const path = __importStar(require("path"));
// tslint:disable:max-line-length
describe('OktaDev Schematics: Angular', () => {
    const schematicRunner = new testing_1.SchematicTestRunner('schematics', path.join(__dirname, './../collection.json'));
    const defaultOptions = {
        project: 'bar',
        issuer: 'https://dev-737523.okta.com/oauth2/default',
        clientId: '0oaifymbuodpH8nAi0h7'
    };
    let appTree;
    // tslint:disable-next-line:no-any
    const workspaceOptions = {
        name: 'workspace',
        newProjectRoot: 'projects',
        version: '0.5.0',
    };
    // tslint:disable-next-line:no-any
    const appOptions = {
        name: 'authtest',
        inlineStyle: false,
        inlineTemplate: false,
        routing: false,
        style: 'css',
        skipTests: false,
    };
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        appTree = yield schematicRunner.runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions).toPromise();
        appTree = yield schematicRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree).toPromise();
    }));
    it('should create home component files', (done) => {
        const files = ['home.component.css', 'home.component.html', 'home.component.spec.ts', 'home.component.ts'];
        const homePath = '/projects/authtest/src/app/home/';
        schematicRunner.runSchematicAsync('add-auth', defaultOptions, appTree).toPromise().then(tree => {
            files.forEach(f => {
                const path = `${homePath}${f}`;
                expect(tree.exists(path)).toEqual(true);
            });
            done();
        }, done.fail);
    });
    it('should create an auth interceptor', (done) => {
        schematicRunner.runSchematicAsync('add-auth', defaultOptions, appTree).toPromise().then(tree => {
            expect(tree.exists('/projects/authtest/src/app/shared/okta/auth.interceptor.ts')).toEqual(true);
            done();
        }, done.fail);
    });
    it('should add routes for callback', (done) => {
        schematicRunner.runSchematicAsync('add-auth', defaultOptions, appTree).toPromise().then(tree => {
            const routingModule = tree.readContent('/projects/authtest/src/app/auth-routing.module.ts');
            expect(routingModule).toContain(`path: 'home'`);
            expect(routingModule).toContain(`path: 'implicit/callback'`);
            done();
        }, done.fail);
    });
    it('should import the auth-routing module in the app module file', (done) => {
        schematicRunner.runSchematicAsync('add-auth', defaultOptions, appTree).toPromise().then(tree => {
            const appModule = tree.readContent('/projects/authtest/src/app/app.module.ts');
            expect(appModule).toMatch(/AuthRoutingModule/);
            done();
        }, done.fail);
    });
    it('should set the issuer & clientId in the auth-routing module file', (done) => {
        schematicRunner.runSchematicAsync('add-auth', defaultOptions, appTree).toPromise().then(tree => {
            const appModule = tree.readContent('/projects/authtest/src/app/auth-routing.module.ts');
            expect(appModule).toContain(`issuer: '${defaultOptions.issuer}'`);
            expect(appModule).toContain(`clientId: '${defaultOptions.clientId}'`);
            done();
        }, done.fail);
    });
});
//# sourceMappingURL=angular_spec.js.map