import { AuthorizationRequestHandler, TokenError } from '@openid/appauth';
import { IAuthAction } from './auth-action';
import { UserInfoHandler } from './user-info-request-handler';
import { EndSessionHandler } from './end-session-request-handler';
import { IAuthConfig } from './auth-configuration';
import { Browser } from "./auth-browser";
import { StorageBackend, Requestor, AuthorizationServiceConfiguration, TokenResponse, AuthorizationRequest, AuthorizationResponse, AuthorizationError, TokenRequestHandler } from '@openid/appauth';
import { Observable, BehaviorSubject } from 'rxjs';
import { ImplicitRequestHandler } from './implicit-request-handler';
import { ImplicitRequest } from './implicit-request';
export declare class IonicAuth {
    protected browser: Browser;
    protected storage: StorageBackend;
    protected requestor: Requestor;
    protected tokenHandler: TokenRequestHandler;
    protected userInfoHandler: UserInfoHandler;
    protected requestHandler: AuthorizationRequestHandler | ImplicitRequestHandler;
    protected endSessionHandler: EndSessionHandler;
    protected configuration: AuthorizationServiceConfiguration | undefined;
    protected authConfig: IAuthConfig | undefined;
    protected authSubject: BehaviorSubject<IAuthAction>;
    authObservable: Observable<IAuthAction>;
    constructor(browser?: Browser, storage?: StorageBackend, requestor?: Requestor, tokenHandler?: TokenRequestHandler, userInfoHandler?: UserInfoHandler, requestHandler?: AuthorizationRequestHandler | ImplicitRequestHandler, endSessionHandler?: EndSessionHandler);
    protected getAuthConfig(): IAuthConfig;
    protected setupNotifier(): void;
    protected onImplicitNotification(request: ImplicitRequest, response: TokenResponse | null, error: TokenError | null): void;
    protected onAuthorizationNotification(request: AuthorizationRequest, response: AuthorizationResponse | null, error: AuthorizationError | null): void;
    signIn(loginHint?: string): Promise<void>;
    signOut(): Promise<void>;
    getUserInfo<T>(): Promise<T>;
    startUpAsync(): Promise<void>;
    AuthorizationCallBack(url: string): Promise<void>;
    EndSessionCallBack(): Promise<void>;
    protected performEndSessionRequest(): Promise<void>;
    protected performAuthorizationRequest(loginHint?: string): Promise<void>;
    protected getAuthorizationRequest(loginHint?: string): Promise<AuthorizationRequest>;
    protected getImplicitRequest(loginHint?: string): Promise<ImplicitRequest>;
    protected getConfiguration(): Promise<AuthorizationServiceConfiguration>;
    protected requestAccessToken(code: string, codeVerifier?: string): Promise<void>;
    requestRefreshToken(tokenResponse: TokenResponse): Promise<void>;
    getValidToken(): Promise<TokenResponse | undefined>;
    protected requestNewToken(token: TokenResponse): Promise<TokenResponse | undefined>;
    protected getTokenFromObserver(): Promise<TokenResponse | undefined>;
}
