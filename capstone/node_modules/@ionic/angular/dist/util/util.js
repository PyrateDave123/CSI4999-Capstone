export function inputs(instance, el, props) {
    props.forEach(function (propName) {
        Object.defineProperty(instance, propName, {
            get: function () { return el.nativeElement[propName]; }, set: function (val) { return el.nativeElement[propName] = val; }
        });
    });
}
export function proxyEvent(emitter, el, eventName) {
    el.addEventListener(eventName, function (ev) {
        // ?? cordova might emit "null" events
        emitter.next(ev != null ? ev.detail : undefined);
    });
}
export function proxyMethod(ctrlName, methodName) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var controller = ensureElementInBody(ctrlName);
    return controller.componentOnReady()
        .then(function () { return controller[methodName].apply(controller, args); });
}
export function ensureElementInBody(elementName) {
    var element = document.querySelector(elementName);
    if (!element) {
        element = document.createElement(elementName);
        document.body.appendChild(element);
    }
    return element;
}
export function deepEqual(x, y) {
    if (x === y) {
        return true;
    }
    else if (typeof x === 'object' && x != null && (typeof y === 'object' && y != null)) {
        if (Object.keys(x).length !== Object.keys(y).length) {
            return false;
        }
        for (var prop in x) {
            if (y.hasOwnProperty(prop)) {
                if (!deepEqual(x[prop], y[prop])) {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    }
    else {
        return false;
    }
}
