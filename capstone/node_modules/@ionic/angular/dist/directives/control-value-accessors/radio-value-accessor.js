import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ValueAccessor } from './value-accessor';
var RadioValueAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(RadioValueAccessor, _super);
    function RadioValueAccessor(el) {
        return _super.call(this, el) || this;
    }
    RadioValueAccessor_1 = RadioValueAccessor;
    RadioValueAccessor.prototype._handleIonSelect = function (value) {
        this.handleChangeEvent(value);
    };
    var RadioValueAccessor_1;
    tslib_1.__decorate([
        HostListener('ionSelect', ['$event.target.checked']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RadioValueAccessor.prototype, "_handleIonSelect", null);
    RadioValueAccessor = RadioValueAccessor_1 = tslib_1.__decorate([
        Directive({
            /* tslint:disable-next-line:directive-selector */
            selector: 'ion-radio',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: RadioValueAccessor_1,
                    multi: true
                }
            ]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], RadioValueAccessor);
    return RadioValueAccessor;
}(ValueAccessor));
export { RadioValueAccessor };
