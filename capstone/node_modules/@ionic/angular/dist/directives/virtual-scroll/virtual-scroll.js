import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Input, IterableDiffers, NgZone } from '@angular/core';
import { proxyInputs, proxyMethods } from '../proxies';
import { VirtualFooter } from './virtual-footer';
import { VirtualHeader } from './virtual-header';
import { VirtualItem } from './virtual-item';
var IonVirtualScroll = /** @class */ (function () {
    function IonVirtualScroll(zone, iterableDiffers, elementRef) {
        this.zone = zone;
        this.iterableDiffers = iterableDiffers;
        this.refMap = new WeakMap();
        this.nativeEl = elementRef.nativeElement;
        this.nativeEl.nodeRender = this.nodeRender.bind(this);
        proxyInputs(this, this.nativeEl, [
            'approxItemHeight',
            'approxHeaderHeight',
            'approxFooterHeight',
            'headerFn',
            'footerFn',
            'items',
            'itemHeight'
        ]);
        proxyMethods(this, this.nativeEl, [
            'checkEnd',
            'checkRange',
            'positionForItem'
        ]);
    }
    IonVirtualScroll.prototype.ngOnChanges = function (changes) {
        if (this.trackBy && 'items' in changes) {
            // React on virtualScroll changes only once all inputs have been initialized
            var value = changes['items'].currentValue;
            if (this.differ === undefined && value != null) {
                try {
                    this.differ = this.iterableDiffers.find(value).create(this.trackBy);
                }
                catch (e) {
                    throw new Error("Cannot find a differ supporting object '" + value + "'. VirtualScroll only supports binding to Iterables such as Arrays.");
                }
            }
        }
    };
    IonVirtualScroll.prototype.ngDoCheck = function () {
        // and if there actually are changes
        var changes = this.differ !== undefined && this.items ? this.differ.diff(this.items) : null;
        if (changes === null) {
            return;
        }
        // TODO: optimize
        this.checkRange(0);
    };
    IonVirtualScroll.prototype.nodeRender = function (el, cell, index) {
        var _this = this;
        return this.zone.run(function () {
            var node;
            if (!el) {
                node = _this.itmTmp.viewContainer.createEmbeddedView(_this.getComponent(cell.type), { $implicit: cell.value, index: index }, index);
                el = getElement(node);
                _this.refMap.set(el, node);
            }
            else {
                node = _this.refMap.get(el);
                var ctx = node.context;
                ctx.$implicit = cell.value;
                ctx.index = cell.index;
            }
            // run sync change detections
            node.detectChanges();
            return el;
        });
    };
    IonVirtualScroll.prototype.getComponent = function (type) {
        switch (type) {
            case 'item': return this.itmTmp.templateRef;
            case 'header': return this.hdrTmp.templateRef;
            case 'footer': return this.ftrTmp.templateRef;
        }
        throw new Error('template for virtual item was not provided');
    };
    tslib_1.__decorate([
        ContentChild(VirtualItem),
        tslib_1.__metadata("design:type", VirtualItem)
    ], IonVirtualScroll.prototype, "itmTmp", void 0);
    tslib_1.__decorate([
        ContentChild(VirtualHeader),
        tslib_1.__metadata("design:type", VirtualHeader)
    ], IonVirtualScroll.prototype, "hdrTmp", void 0);
    tslib_1.__decorate([
        ContentChild(VirtualFooter),
        tslib_1.__metadata("design:type", VirtualFooter)
    ], IonVirtualScroll.prototype, "ftrTmp", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], IonVirtualScroll.prototype, "approxItemHeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], IonVirtualScroll.prototype, "approxHeaderHeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], IonVirtualScroll.prototype, "approxFooterHeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], IonVirtualScroll.prototype, "headerFn", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], IonVirtualScroll.prototype, "footerFn", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], IonVirtualScroll.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], IonVirtualScroll.prototype, "itemHeight", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], IonVirtualScroll.prototype, "trackBy", void 0);
    IonVirtualScroll = tslib_1.__decorate([
        Component({
            selector: 'ion-virtual-scroll',
            template: '<ng-content></ng-content>',
            changeDetection: ChangeDetectionStrategy.OnPush,
        }),
        tslib_1.__metadata("design:paramtypes", [NgZone,
            IterableDiffers,
            ElementRef])
    ], IonVirtualScroll);
    return IonVirtualScroll;
}());
export { IonVirtualScroll };
function getElement(view) {
    var rootNodes = view.rootNodes;
    for (var i = 0; i < rootNodes.length; i++) {
        if (rootNodes[i].nodeType === 1) {
            return rootNodes[i];
        }
    }
    throw new Error('virtual element was not created');
}
